"""
Standalone Cost Analyzer Test - No pytest dependency
Tests cost analysis capabilities without external dependencies
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from cost_analyzer import (
    CostAnalyzer, CostBreakdown, ProfitAnalysis, 
    PricingStrategy, MarketPosition
)


def test_cost_analyzer_comprehensive():
    """Comprehensive test of cost analyzer capabilities"""
    print("üí∞ Testing Cost Analyzer Capabilities")
    print("=" * 50)
    
    # Initialize analyzer
    analyzer = CostAnalyzer({
        'target_margin': 30.0,
        'min_margin': 15.0,
        'transaction_fee_rate': 0.029,
        'marketing_cost_rate': 0.10,
        'overhead_rate': 0.05
    })
    
    print("‚úÖ Cost Analyzer initialized with custom configuration")
    
    # Test 1: Cost Breakdown Analysis
    print("\n1Ô∏è‚É£ Testing Cost Breakdown Analysis...")
    breakdown = analyzer.analyze_cost_structure(
        base_cost=800,  # $8.00
        selling_price=1999,  # $19.99
        additional_costs={
            'shipping_cost': 200,  # $2.00
            'processing_fee': 100,  # $1.00
            'packaging_cost': 25   # $0.25
        }
    )
    
    print(f"   ‚Ä¢ Base Cost: ${breakdown.base_cost/100:.2f}")
    print(f"   ‚Ä¢ Shipping: ${breakdown.shipping_cost/100:.2f}")
    print(f"   ‚Ä¢ Processing: ${breakdown.processing_fee/100:.2f}")
    print(f"   ‚Ä¢ Transaction Fee: ${breakdown.transaction_fee/100:.2f}")
    print(f"   ‚Ä¢ Marketing Allocation: ${breakdown.marketing_cost/100:.2f}")
    print(f"   ‚Ä¢ Overhead Allocation: ${breakdown.overhead_cost/100:.2f}")
    print(f"   ‚Ä¢ Total Cost: ${breakdown.total_cost/100:.2f}")
    
    assert breakdown.total_cost > 0
    assert breakdown.marketing_cost > 0
    assert breakdown.overhead_cost > 0
    print("‚úÖ Cost breakdown calculation successful")
    
    # Test 2: Profit Analysis
    print("\n2Ô∏è‚É£ Testing Profit Analysis...")
    profit_analysis = analyzer.calculate_profit_analysis(1999, breakdown)
    
    print(f"   ‚Ä¢ Selling Price: ${profit_analysis.selling_price/100:.2f}")
    print(f"   ‚Ä¢ Total Cost: ${profit_analysis.total_cost/100:.2f}")
    print(f"   ‚Ä¢ Gross Profit: ${profit_analysis.gross_profit/100:.2f}")
    print(f"   ‚Ä¢ Gross Margin: {profit_analysis.gross_margin_percent:.1f}%")
    print(f"   ‚Ä¢ Break-even Price: ${profit_analysis.break_even_price/100:.2f}")
    print(f"   ‚Ä¢ Recommended Price: ${profit_analysis.recommended_price/100:.2f}")
    print(f"   ‚Ä¢ ROI: {profit_analysis.roi_percent:.1f}%")
    
    assert profit_analysis.gross_margin_percent > 0
    assert profit_analysis.recommended_price > breakdown.total_cost
    print("‚úÖ Profit analysis calculation successful")
    
    # Test 3: Pricing Strategy Recommendations
    print("\n3Ô∏è‚É£ Testing Pricing Strategy Recommendations...")
    competitor_prices = [1599, 1799, 2199, 2499]  # Competitor prices in cents
    
    recommendations = analyzer.recommend_pricing_strategy(
        breakdown, 
        MarketPosition.MID_RANGE, 
        competitor_prices
    )
    
    print(f"   ‚Ä¢ Strategies analyzed: {len(recommendations['strategies'])}")
    print(f"   ‚Ä¢ Recommended strategy: {recommendations['recommended']['strategy'].value}")
    print(f"   ‚Ä¢ Recommended price: ${recommendations['recommended']['data']['price']/100:.2f}")
    print(f"   ‚Ä¢ Confidence: {recommendations['recommended']['confidence']:.2f}")
    
    # Show all strategies
    for strategy, data in recommendations['strategies'].items():
        print(f"     - {strategy.value}: ${data['price']/100:.2f} ({data['margin']:.1f}% margin)")
    
    assert 'strategies' in recommendations
    assert 'recommended' in recommendations
    print("‚úÖ Pricing strategy recommendations successful")
    
    # Test 4: Market Analysis
    print("\n4Ô∏è‚É£ Testing Market Analysis...")
    market_analysis = recommendations['market_analysis']
    
    if 'price_range' in market_analysis:
        print(f"   ‚Ä¢ Competitor count: {market_analysis['competitors']}")
        print(f"   ‚Ä¢ Price range: ${market_analysis['price_range']['min']/100:.2f} - ${market_analysis['price_range']['max']/100:.2f}")
        print(f"   ‚Ä¢ Median price: ${market_analysis['price_range']['median']/100:.2f}")
        
        if 'price_dispersion' in market_analysis:
            print(f"   ‚Ä¢ Market maturity: {market_analysis['price_dispersion']['market_maturity']}")
        
        if 'gaps' in market_analysis and market_analysis['gaps']:
            print(f"   ‚Ä¢ Pricing gaps found: {len(market_analysis['gaps'])}")
            for gap in market_analysis['gaps'][:2]:  # Show first 2
                print(f"     - Gap: ${gap['lower_price']/100:.2f} to ${gap['upper_price']/100:.2f} ({gap['gap_percent']:.1f}%)")
    
    print("‚úÖ Market analysis successful")
    
    # Test 5: Price Elasticity Analysis
    print("\n5Ô∏è‚É£ Testing Price Elasticity Analysis...")
    elasticity_scenarios = [
        (10.0, -15.0),   # 10% price increase, 15% demand decrease
        (-5.0, 8.0),     # 5% price decrease, 8% demand increase
        (20.0, -25.0),   # 20% price increase, 25% demand decrease
    ]
    
    for price_change, demand_change in elasticity_scenarios:
        impact = analyzer.calculate_price_elasticity_impact(
            base_price=1999,
            price_change_percent=price_change,
            estimated_demand_change_percent=demand_change
        )
        
        print(f"   ‚Ä¢ Price change {price_change:+.1f}% ‚Üí Demand change {demand_change:+.1f}%")
        print(f"     Revenue impact: {impact['revenue_change_percent']:+.1f}%")
        print(f"     Price elasticity: {impact['elasticity']:.2f}")
    
    print("‚úÖ Price elasticity analysis successful")
    
    # Test 6: Volume Pricing Optimization
    print("\n6Ô∏è‚É£ Testing Volume Pricing Optimization...")
    volume_tiers = [
        (1, 1999),    # Single item
        (10, 1899),   # 10-pack discount
        (50, 1799),   # Bulk discount
        (100, 1699)   # Large order discount
    ]
    
    volume_analysis = analyzer.optimize_pricing_for_volume(breakdown, volume_tiers)
    
    for quantity, data in volume_analysis.items():
        print(f"   ‚Ä¢ Quantity {quantity}: ${data['price']/100:.2f}")
        print(f"     Standard margin: {data['standard_margin']:.1f}%")
        print(f"     Volume-adjusted margin: {data['volume_adjusted_margin']:.1f}%")
        print(f"     Cost savings: {data['cost_savings']:.1f}%")
        if data['breakeven_quantity'] != float('inf'):
            print(f"     Breakeven quantity: {data['breakeven_quantity']}")
    
    print("‚úÖ Volume pricing optimization successful")
    
    # Test 7: Comprehensive Pricing Report
    print("\n7Ô∏è‚É£ Testing Comprehensive Pricing Report...")
    report = analyzer.generate_pricing_report(
        product_id="test_product_comprehensive",
        cost_breakdown=breakdown,
        current_price=1999,
        market_position=MarketPosition.MID_RANGE,
        competitor_prices=competitor_prices
    )
    
    print(f"   ‚Ä¢ Report sections: {len(report)}")
    print(f"   ‚Ä¢ Product ID: {report['product_id']}")
    print(f"   ‚Ä¢ Analysis date: {report['analysis_date']}")
    
    summary = report['summary']
    print(f"   ‚Ä¢ Current margin: {summary['current_margin']:.1f}%")
    print(f"   ‚Ä¢ Recommended price: ${summary['recommended_price']/100:.2f}")
    print(f"   ‚Ä¢ Margin improvement: {summary['margin_improvement']:.1f}%")
    print(f"   ‚Ä¢ Risk level: {summary['risk_level']}")
    print(f"   ‚Ä¢ Confidence: {summary['confidence']:.2f}")
    
    assert 'cost_breakdown' in report
    assert 'profit_analysis' in report
    assert 'pricing_recommendations' in report
    assert 'price_sensitivity_analysis' in report
    print("‚úÖ Comprehensive pricing report successful")
    
    # Test 8: Edge Cases and Error Handling
    print("\n8Ô∏è‚É£ Testing Edge Cases...")
    
    try:
        # Test with zero price
        zero_analysis = analyzer.calculate_profit_analysis(0, breakdown)
        print(f"   ‚Ä¢ Zero price handling: Margin = {zero_analysis.gross_margin_percent:.1f}%")
        
        # Test with very high cost
        high_cost_breakdown = CostBreakdown(
            base_cost=5000, shipping_cost=1000, processing_fee=500,
            transaction_fee=200, packaging_cost=100, marketing_cost=800,
            overhead_cost=400, total_cost=8000
        )
        high_cost_analysis = analyzer.calculate_profit_analysis(2000, high_cost_breakdown)
        print(f"   ‚Ä¢ High cost scenario: Margin = {high_cost_analysis.gross_margin_percent:.1f}%")
        
        # Test with no competitor data
        no_comp_recommendations = analyzer.recommend_pricing_strategy(
            breakdown, MarketPosition.PREMIUM, []
        )
        print(f"   ‚Ä¢ No competitor data: Strategy = {no_comp_recommendations['recommended']['strategy'].value}")
        
        print("‚úÖ Edge cases handled successfully")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Edge case handling warning: {e}")
    
    print("\n" + "=" * 50)
    print("üéâ All Cost Analyzer tests completed successfully!")
    print("\nüìä Summary of Capabilities Tested:")
    print("   ‚úÖ Cost structure analysis with multiple cost components")
    print("   ‚úÖ Profit margin calculation and break-even analysis")
    print("   ‚úÖ Multiple pricing strategy recommendations")
    print("   ‚úÖ Market competitive analysis")
    print("   ‚úÖ Price elasticity and demand impact modeling")
    print("   ‚úÖ Volume pricing optimization")
    print("   ‚úÖ Comprehensive business reporting")
    print("   ‚úÖ Edge case and error handling")
    print("\nüí° Key Features:")
    print("   ‚Ä¢ Works without pandas dependency")
    print("   ‚Ä¢ Uses built-in statistics module for calculations")
    print("   ‚Ä¢ Provides detailed cost breakdowns")
    print("   ‚Ä¢ Offers strategic pricing recommendations")
    print("   ‚Ä¢ Includes risk analysis and confidence scoring")
    print("   ‚Ä¢ Supports multiple market positioning strategies")


if __name__ == "__main__":
    test_cost_analyzer_comprehensive()